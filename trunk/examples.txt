#################
# excavator arm #
#################

# first a base
object :lower
  box(v(1,1,0), v(1.2,2,1))
  fix 0
  fix 1
  fix 2
  fix 3
  mass 100
end_object

# then a (soon to be articulated) extension
object :upper
  box(v(1.2,1,1), v(2.2,2,1.2))
end_object

# and another one
object :end
  box(v(2.2,1,0.5), v(2.4,2,1))
end_object

# join them together
join :lower, :upper, [1.2,1,1], [1.2,2,1] 
join :upper, :end,   [2.2,1,1], [2.2,2,1] 

# then add some keyboard controlled hydraulic cylinder between the two
p1 = find_particle(:lower,[1,1,1])
p2 = find_particle(:upper,[1.2,1,1.2])
actuator1 = string p1, p2
p1 = find_particle(:lower,[1,2,1])
p2 = find_particle(:upper,[1.2,2,1.2])
actuator2 = string p1, p2
p1 = find_particle(:upper,[2.2,1,1.2])
p2 = find_particle(:end,[2.4,1,1])
actuator3 = string p1, p2
p1 = find_particle(:upper,[2.2,2,1.2])
p2 = find_particle(:end,[2.4,2,1])
actuator4 = string p1, p2
# controls
control 'o', [actuator1, actuator2], :add_length, -0.01
control 'p', [actuator1, actuator2], :add_length,  0.01

control 'l', [actuator3, actuator4], :add_length, -0.01
control 'm', [actuator3, actuator4], :add_length,  0.01

control 'axis1', [actuator1, actuator2], :add_length, -0.005
control 'axis2', [actuator3, actuator4], :add_length, -0.005

# we're done !
boundary :all, :z, :>, 0
#gravity  :all

console "try pressing 'o' / 'p' and 'l' / 'm' :)"
console "A little excavator...."

####################################################################
# a necklace
object
  20.times do |i|
    p(i*0.1,0, 3)
    string :last_two # do nothing if only one last element
  end
  fix   :first
end_object

gravity :all


####################################################################
# a strange snake
object
  20.times do |i|
    p(-1+i*0.1,0,1)
    string :last_two
  end
  uni :first, [0,0,0.25]
  uni :last, [0,0,-0.2]
end_object


####################################################################
# 5 strange snakes
def snake(x)
  object
    20.times do |i|
      p(-1+i*0.1 + x/4.0,0,1)
      string :last_two
    end
    uni :first, [0,0,0.25]
    uni :last, [0,0,-0.2]
  end_object
end

5.times {|i| snake(i) }


####################################################################
# monster
object
  head = p(0,1,2)
  fix head
  
  l1   = p(1,2,1.7)
  l2   = p(-1,2,1.7)
  a = string head, l1
  b = string head, l2
  
  l3    = p(0,2,1)
  l3.set_mass 0.001
  c = string l1,l3
  d = string l2,l3
  

  uni   l2, [0,0,1]
  motor l3, head, [0,0,1], 3
  
  control 'o', [a,b,c,d], :add_length, -0.1
  control 'p', [a,b,c,d], :add_length,  0.1

end_object


##################
FORCES
##################

# Example 1: unidirectional force

object
  p(0,0,2)
  p(1,0,2)
  string 0,1
  uni 0, [0,0,9.81*2]
end_object

gravity :all

# Example 2: motor

object
  p(0,0,2)
  p(1,0,2)
  fix 0

  string 0,1
  motor 1, [0,0,2], [0,1,0], 9.81 + 0.2
end_object

gravity :all

# Example 3 : Piston

object
  c = p(0,0,1)
  fix c
  p(0.2,0,1)
  p(0,0,1.5)

  string 0,1
  string 1,2
  boundary 2, :x, :>, -0.01
  boundary 2, :x, :<,  0.01
  boundary 2, :y, :>, -0.01
  boundary 2, :y, :<,  0.01

  motor 1, c, [0,1,0], -9.82
end_object

gravity :all

##########################################################
# some randomness
def random
  x = 10
  p(rand(x)/10.0, rand(x)/10.0, rand(x)/10.0)
  string :last_two
end

object
  100.times { random }
  uni :last, [0,0,100*9.81]
  fix :first
end_object

gravity :all
boundary :all, :z, :>, 0


##########################################################
# draft of a hot balloon
def hot_particle(x, y, f)
  p(x, y, 2)
  string :last, f
  uni :last, [0,0,9.81*2]
end

object
  fix f = p(1,0,0)
  6.times { |i| hot_particle(0, i/2.0-1.5, f) }
  6.times { |i| hot_particle(2, i/2.0-1.5, f) }
end_object

gravity :all
boundary :all, :z, :>, 0


##########################################################


object
  fix a = p(0,0,1)
  
  20.times {
    p(5-rand(10),5-rand(10),5-rand(10))
    gravit :last, a
    uni :last, [rand(20)/10.0,rand(20)/10.0,rand(20)/10.0]
    string :last_two
    }
end_object




